{
  "0": {
    "id": "0",
    "title": "",
    "content": "404 Page not found :( The requested page could not be found.",
    "url": "/jekyll-lunr-advanced-js-search/404.html",
    "relUrl": "/404.html"
  },
  "1": {
    "id": "1",
    "title": "Demo",
    "content": "All ethnicities African American Armenian Caucasian Mexican Native American Puerto Rican Activist Anthropologist Artist Attorney Author Educator Essayist FBI special agent Folklorist Musician Nun Painter Pilot Pirate Poet Politician Sculptor Solider Search Sort By: Relevance Name Birth Year",
    "url": "/jekyll-lunr-advanced-js-search/demo",
    "relUrl": "/demo"
  },
  "2": {
    "id": "2",
    "title": "Explore the data",
    "content": "People Belva Lockwood Bessie Coleman Alaska P. Davidson Sor Juana Inés de la Cruz Zora Neale Hurston Edmonia Lewis Anne Bonny Mary Read Julia de Burgos Silva Kaputikyan Mercedes Negrón Muñoz Élisabeth Sophie Chéron Works Loa to Divine Narcissus Their Eyes Were Watching God Moses, Man of the Mountain Forever Free Hagar",
    "url": "/jekyll-lunr-advanced-js-search/explore",
    "relUrl": "/explore"
  },
  "3": {
    "id": "3",
    "title": "Add results rendering",
    "content": "Add the following to the same page as the search form. &lt;script src=&quot;{{site.baseurl}}/js/index.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;{{site.baseurl}}/js/advanced-search.js&quot;&gt;&lt;/script&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;{{site.baseurl}}/css/advanced-search.css&quot;&gt; &lt;div id=&quot;spinner&quot;&gt;&lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&lt;/div&gt; The spinner div is not required but it provides a spinner. There are three required html items that have to be defined in order for the results, facets and pagination to render. facets by default are in a id field of facets. This is not required if you do not want any facets. The results get dumped in the search_results and pagination gets dumped in pagination. These preset tags can be overridden on initialization. The framework used in this website is below. Additionally, if you want any sort fields besides relevance or name, another option field needs to be added. Make sure the value option matches the jekyll field or search field in your config. This field does not have to be set in the config field, it just needs to exist in the jekyll fields. It can also be set as a search field from the config settings. For best results make sure the sort field is not a list. &lt;div id=&quot;header_info&quot;&gt;&lt;/div&gt; &lt;div style=&quot;float: left; width: 20%; &quot;&gt; &lt;div id=&quot;facets&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;float: left; width: 80%; display: none; border: 1px solid #ccc&quot; class=&quot;all_results&quot;&gt; &lt;div id=&quot;search_results&quot;&gt; &lt;div id=&quot;searchInfo&quot;&gt; &lt;span id=&quot;number_results&quot;&gt;&lt;/span&gt; &lt;span id=&quot;sort_by&quot; class=&quot;dropdownsort&quot;&gt;&lt;label for=&quot;sortSelect&quot;&gt;Sort By:&lt;/label&gt; &lt;select id=&quot;sortSelect&quot; name=&quot;sort&quot; onchange=&quot;changeSort(event);&quot;&gt; &lt;option value=&quot;&quot;&gt;Relevance&lt;/option&gt; &lt;option value=&quot;atoz&quot;&gt;Name&lt;/option&gt; &lt;option value=&quot;born&quot;&gt;Birth Year&lt;/option&gt; &lt;/select&gt; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;ul id=&quot;resultslist&quot;&gt; &lt;/ul&gt; &lt;div id=&quot;pagination&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;div style=&quot;clear:both&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt; The final step requires the search to be initialized on page load. Add the following code to the page. The example below also shows how to initialize and override default fields for results. &lt;script&gt; window.addEventListener(&quot;load&quot;, function(){ loadsearchtemplate() $(&#39;#spinner&#39;).hide() }); &lt;/script&gt; With overrides (below) &lt;script&gt; window.addEventListener(&quot;load&quot;, function(){ var dict = {facets: &#39;#new_facet_field&#39;, pagination: &#39;#paginationid&#39;, &quot;results&quot;: &quot;.results-class-override&quot;} loadsearchtemplate(dict) $(&#39;#spinner&#39;).hide() }); &lt;/script&gt;",
    "url": "/jekyll-lunr-advanced-js-search/docs/quickstart/frontend.html",
    "relUrl": "/docs/quickstart/frontend.html"
  },
  "4": {
    "id": "4",
    "title": "Home",
    "content": "jekyll-lunr-advanced-js-search is a gem for creating advanced searches of collections or posts. It is not a full site search. It can be used for the creation of a single query or a more robust advanced search interface. Sites which are using this gem are: North Carolina Architects and Builders http://ncarchitects.lib.ncsu.edu",
    "url": "/jekyll-lunr-advanced-js-search/",
    "relUrl": "/"
  },
  "5": {
    "id": "5",
    "title": "Install",
    "content": "Install the plugin Choose to install as either a Ruby Gem, or by copying the pre-built plugin file to your Jekyll site. Install as Ruby Gem Add gem to Gemfile gem &quot;jekyll-lunr-advanced-js-search&quot;, :git =&gt; &quot;git://github.com/dnoneill/jekyll-lunr-js-search.git&quot; Modify your Jekyll _config.yml file to include the Gem. plugins: - jekyll-lunr-advanced-js-search OR Install pre-built plugin Place build/jekyll_lunr_advanced_js_search.rb inside the _plugins folder in the root of your Jekyll site. The content from all Jekyll posts and pages will be indexed to a js/index.js file ready for lunr.js to consume. This happens each time the site is generated. A JavaScript plugin is provided in js/lunr.advanced.search.js to handle the configuration of lunr.js and generate the search data. Dependencies for the JavaScript plugin are as follows. jQuery lunr.js paginationjs lodash fontawesome (Optional) A pre-built version of the JavaScript plugin, along with all of the above dependencies, concatenated is available in the build/advanced-search.js.",
    "url": "/jekyll-lunr-advanced-js-search/docs/quickstart/installation.html",
    "relUrl": "/docs/quickstart/installation.html"
  },
  "6": {
    "id": "6",
    "title": "Quickstart",
    "content": "jekyll-lunr-advanced-js-search is a gem that creates a prebuilt lunr index for a Jekyll site and also provides users with a prebuilt JavaScript plugin for creating and displaying a search. This quickstart guide provides step by step instructions for installing this gem.",
    "url": "/jekyll-lunr-advanced-js-search/quickstart",
    "relUrl": "/quickstart"
  },
  "7": {
    "id": "7",
    "title": "Create a Search Form",
    "content": "The only really important thing when creating the search form is to make sure the “name” field matches the “searchfield” in the fields in _config.yml file you would like to search against. An example of this form can be seen below. This is the code being used in the demo {% assign ethnicities = site.people | map: &quot;ethnicity&quot; | compact %} {% assign ethnicities = ethnicities | join: &#39;,&#39; | split: &#39;,&#39; | uniq | sort %} {% assign occupations = site.people | map: &quot;occupation&quot; | compact %} {% assign occupations = occupations | join: &#39;,&#39; | split: &#39;,&#39; | uniq | sort %} &lt;form role=&quot;search&quot;&gt; &lt;div class=&quot;search-control&quot; style=&quot;display:none;&quot;&gt; &lt;input type=&quot;search&quot; id=&quot;person-serarch&quot; name=&quot;q&quot; placeholder=&quot;Keyword Search&quot; aria-label=&quot;Search people using keyword&quot;&gt; &lt;input type=&quot;search&quot; id=&quot;person-search&quot; name=&quot;name&quot; placeholder=&quot;Search Name&quot; aria-label=&quot;Search people using name&quot;&gt; &lt;select id=&quot;ethnicitieselect&quot; name=&quot;ethnicity&quot; aria-label=&quot;Dropdown for ethnicity&quot;&gt; &lt;option value=&quot;&quot;&gt;All ethnicities&lt;/option&gt; {% for ethnicity in ethnicities %} {% if ethnicity != &#39;&#39; %} &lt;option value=&quot;{{ethnicity}}&quot;&gt;{{ethnicity}}&lt;/option&gt; {% endif %} {% endfor %} &lt;/select&gt; &lt;select multiple=&quot;multiple&quot; size=&quot;10&quot; id=&quot;occupationSelect&quot; name=&quot;occupation&quot; aria-label=&quot;occupation search&quot;&gt; &lt;optgroup label=&quot;Occupations&quot;&gt; {% for occupation in occupations %} {% if occupation != &#39;&#39; %} &lt;option value=&quot;{{occupation}}&quot;&gt;{{occupation}}&lt;/option&gt; {% endif %} {% endfor %} &lt;/optgroup&gt; &lt;/select&gt; &lt;button class=&quot;custom_button&quot; style=&quot;float: right;&quot;&gt;Search&lt;/button&gt; &lt;/div&gt; &lt;/form&gt;",
    "url": "/jekyll-lunr-advanced-js-search/docs/quickstart/searchform.html",
    "relUrl": "/docs/quickstart/searchform.html"
  },
  "8": {
    "id": "8",
    "title": "_config.yml setup",
    "content": "Collections Fields Widgets for complex fields Nested widget Flatten widget Relational widget Headerfield Display fields atozsortfield fuzzysearchfields Full settings example If the collection is not posts you will have define the collection in the _config.yml file. An example can be seen below. Two collections are being defined. The people collection whose files are in a _people folder and the works collection which is in the _works folder. It also defines the permalink for all the items in the folders. collections: people: output: true permalink: /people/:path works: output: true permalink: /works/:path Collections Next the lunr settings need to be defined. It requires a good grasp on your data. Firstly the collection defines which collection or collections is going to get indexed. This must be a list even for a single collection lunr_settings: collections: - people Fields Fields defines the fields which get indexed. Each field entry has three required fields and two optional fields: searchfield is the field used in the search form. It should be one word. boost which determines how important a match in lunr is. More information on boosts). jekyllfields is also always a list even if a single jekyll field. This is the field in the markdown file. It allows for multiple fields to be searched in a single search field. For example, searching name will match the query against the preferredName and the variantNames see full example facetfield (optional) has a value of true if used. If set as true, it will create a facet in the search interface for the field. (These are ethnicities, occupation, cities, and counties in the demo) widget (optional) type of cleaner for complex data. It can require more data based upon the type of widget. See section below for information on widgets. Widgets for complex fields There are additional fields called widgets for more complex data. They are not needed for jekyll fields that are strings or lists of strings. Nested widget The nested widget takes a complex field like the example below. The example below is the most complex instance that will work with the nested widget. It would also work if wlCity was not in a list. It also requires the field parentfield. In the example below the parent field would be “workLocations” and the jekyllfields would be wlCity and/or wlCounty. workLocations: - wlCity: Owego wlCountry: United States - wlCity: Washington D.C. wlCountry: United States lunr_settings: fields: - boost: 5 jekyllfields: [wlCountry, wlCity] parentfield: workLocations searchfield: worklocations widget: nested Flatten widget The flatten widget takes a complex field like the one seen below. This will get the values in dictionary. contributions: authors: - Author 1 - Author 2 updates: - Content Updater 1 lunr_settings: fields: - boost: 1 jekyllfields: [contributions] searchfield: author widget: flatten Relational widget The final widget is relational widget. This piggybacks on traditional database structures. It requires a collection field which defines the collection which has the relational data. It also requires a matchfield. This is where the collection’s slug will be located. If that is nested a secondaryfield is available but not required. The example below shows the snippet of text targeted in a works file. The contributorId corresponds to the P000004.md file. The works file has a field named contributor which is a list and the slug is located in the contributorId field. If there is a match if will pull out the jekyll fields in the work field for indexing. preferredName: Loa to Divine Narcissus variantName: - El Divino Narciso contributor: - contributorId: P000004 contributorRole: Author lunr_settings: - boost: 10 collection: works jekyllfields: [preferredName, variantName] matchfield: contributor searchfield: works secondaryfield: contributorId widget: relational Headerfield The headerfield defines what will display for header field in the results. This is a single field. lunr_settings: headerfield: preferredName Display fields The displayfields is a list of fields that will display in a table for results. Like fields it allows for multiple fields. The only required field is field which defines what field is being displayed. It can be a Jekyll field or if a widget has been used on a search field, the search field can be used as the for the field value. label is the plain text label which will display in the information table. This should be entered in the singular form. If the results are plural it will add an s to the label. joiner will join multiple results with whatever is the field. By default it is &#39;, &#39;. conditional means the results will only appear if there is a match in that field, option is true. Additionally, for multiple results the results can be truncated in the table by a number. Conditional example truncate will truncate a list of options at a number of results. See occupation field for truncate example displayfields: - field: variantNames joiner: &#39;&lt;br&gt;&#39; label: Variant Name truncate: 3 - conditional: true field: works joiner: &#39;; &#39; label: Building An excerpt field also get automatically generated. To hide the field add the following to the css: .excerpt { display: none } atozsortfield atozsortfield is the field the sort by ‘name’ field sorts on. This will sort the field from atoz. If you want to add more options for sorting this will be the secondary field that will be sorted. For example, in this demo we added a sort by birth year. Élisabeth Sophie Chéron and Sor Juana Inés de la Cruz have the same birth year. To provide some structure they get sorted by birthyear and then their preferredName (the atozsortfield). This should be a single string field, not a list. lunr_settings: atozsortfield: preferredName fuzzysearchfields fuzzysearchfields should be fields that have an input not a dropdown search field. This basically says any of these fields do not have to match exactly, otherwise . This sets the editDistance to 1. editDistance is also 1 for the query field. Otherwise the search will expect an exact match. An searchfields in this list will do a fuzzy match. This must be a searchfield value from the fields settings. lunr_settings: fuzzysearchfields: [name] Full settings example An example of all these settings can be seen below. An example of it running is here: https://dnoneill.github.io/jekyll-advancedsearch/search?q=&amp;name=&amp;ethnicity= lunr_settings: atozsortfield: preferredName collections: [people] displayfields: - {field: variantNames, label: Variant Name} - {field: occupation, joiner: &#39;; &#39;, label: Occupation, truncate: 2} - {field: born, label: Birth Year} - {conditional: &#39;True&#39;, field: works, joiner: &#39;; &#39;, label: Work} fields: - boost: 10 facetfield: true jekyllfields: [ethnicity] searchfield: ethnicity - boost: 10 jekyllfields: [preferredName, variantNames] searchfield: name - boost: 10 facetfield: true jekyllfields: [occupation] searchfield: occupation - boost: 1 jekyllfields: [content] searchfield: description - boost: 1 jekyllfields: [contributions] searchfield: contributor widget: flatten - boost: 10 facetfield: true jekyllfields: [wlCity] parentfield: workLocations searchfield: cities widget: nested - boost: 10 facetfield: true jekyllfields: [wlCountry] parentfield: workLocations searchfield: countries widget: nested - boost: 10 collection: works jekyllfields: [preferredName, variantName] matchfield: contributor searchfield: works secondaryfield: contributorId widget: relational fuzzysearchfields: [name, birthplace, residences, worklocations] headerfield: preferredName",
    "url": "/jekyll-lunr-advanced-js-search/docs/quickstart/setup.html",
    "relUrl": "/docs/quickstart/setup.html"
  }
  
}
